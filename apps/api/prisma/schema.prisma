generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model Event {
  id            Int           @id @default(autoincrement())
  userId        Int
  title         String
  price         Float
  dateTime      DateTime
  location      String
  description   String
  availableSeat Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  category      String
  banner        String
  booked        Int           @default(0)
  transaction   transaction[]

  @@map("events")
}

model coupondiscount {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique(map: "CouponDiscount_userId_key")
  couponCode         String
  isUsed             Boolean  @default(false)
  discountPersentase Int
  dateReceived       DateTime @default(now())
  expiresOn          DateTime
  user               user     @relation(fields: [userId], references: [id], map: "CouponDiscount_userId_fkey")
}

model referralpoints {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique(map: "ReferralPoints_userId_key")
  pointEarned Int      @default(0)
  dateEarned  DateTime @default(now())
  expiresOn   DateTime
  user        user     @relation(fields: [userId], references: [id], map: "ReferralPoints_userId_fkey")
}

model role {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int    @unique(map: "Role_userId_key")
  user   user   @relation(fields: [userId], references: [id], map: "Role_userId_fkey")
}

model status {
  id          Int           @id @default(autoincrement())
  title       String
  transaction transaction[]
}

model transaction {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique(map: "Transaction_uuid_key")
  userId       Int
  eventId      Int
  statusId     Int      @default(1)
  qty          Int
  paymentProof String?
  total        Int
  pointsUsed   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  events       Event    @relation(fields: [eventId], references: [id], map: "Transaction_eventId_fkey")
  status       status   @relation(fields: [statusId], references: [id], map: "Transaction_statusId_fkey")
  user         user     @relation(fields: [userId], references: [id], map: "Transaction_userId_fkey")

  @@index([eventId], map: "Transaction_eventId_fkey")
  @@index([statusId], map: "Transaction_statusId_fkey")
  @@index([userId], map: "Transaction_userId_fkey")
}

model user {
  id               Int             @id @default(autoincrement())
  firstName        String
  lastName         String
  phoneNumber      String          @unique(map: "User_phoneNumber_key")
  email            String          @unique(map: "User_email_key")
  password         String
  nameOrganization String?
  referralCode     String?         @unique(map: "User_referralCode_key")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  isDeleted        Boolean         @default(false)
  coupondiscount   coupondiscount?
  referralpoints   referralpoints?
  role             role?
  transaction      transaction[]
}
